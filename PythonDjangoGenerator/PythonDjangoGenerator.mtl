[comment encoding = UTF-8 /]
[module PythonDjangoGenerator('http://www.example.org/accelerateMLI', 'http://www.example.org/accelerateMLS', 'http://www.example.org/accelerateMLC')]

[import AccelerateGenerator::Queries::MicroserviceQueries /]

[import PythonDjangoGenerator::MainFiles::generateDockerfile /]
[import PythonDjangoGenerator::MainFiles::generateGitIgnore /]
[import PythonDjangoGenerator::MainFiles::generateReadme /]
[import PythonDjangoGenerator::MainFiles::generateManage /]
[import PythonDjangoGenerator::MainFiles::generateRequirements /]

[import PythonDjangoGenerator::ProjectFiles::generateSettings /]
[import PythonDjangoGenerator::ProjectFiles::generateWsgi /]
[import PythonDjangoGenerator::ProjectFiles::generateAsgi/]
[import PythonDjangoGenerator::ProjectFiles::generateUrls/]
[import PythonDjangoGenerator::ProjectFiles::generateAdmin/]
[import PythonDjangoGenerator::ProjectFiles::generateApps/]
[import PythonDjangoGenerator::ProjectFiles::generateTests/]
[import PythonDjangoGenerator::ProjectFiles::generateEnv/]

[import PythonDjangoGenerator::EntityGeneration::entityGenerator/]

[import PythonDjangoGenerator::Routes::RoutesGenerator/]

[import PythonDjangoGenerator::Auth::AuthGenerationSelector /]

[template public pythonDjangoGenerator(microservice: BackendMicroservice, environment: Provider)]
[comment Here every file for the microservice is generated based on the functions /]

[comment Main Files/]
[dockerfileGenerator(microservice, environment)/]
[gitIgnoreGenerator(microservice, environment)/]
[readmeGenerator(microservice, environment)/]
[generateManage(microservice, environment)/]
[generateRequirements(microservice, environment)/]

[comment Project Files/]
[generateSettings(microservice, environment)/]
[generateAsgi(microservice, environment)/]
[generateWsgi(microservice, environment)/]
[generateUrls(microservice, environment)/]
[generateAdmin(microservice, environment)/]
[generateApps(microservice, environment)/]
[generateTests(microservice, environment)/]
[generateEnv(microservice, environment)/]


[comment Entity Generator/]
[comment Se itera por cada entidad NO ABSTRACTA del microservicio y se la genera/]
[for (class : Class | NonAbstractClasses(microservice.oclAsType(Microservice)))]
	[comment Si se selecciona MongoDB se dirige a esta funcion/]			
	[entityGenerator(
		class,
		microservice,
		environment
	)/]
	
[/for]

[comment Routes Generator/]
[routesGenerator(microservice, environment)/]

[comment Auth Generator/]
[if (microservice.contained_capabilities -> selectByKind(AuthenticationCapability) -> size() > 0)]
	[AuthGenerationSelector(microservice, environment)/]
[/if]

[/template]
