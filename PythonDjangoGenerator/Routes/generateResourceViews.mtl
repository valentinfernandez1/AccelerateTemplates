[comment encoding = UTF-8 /]
[module generateResourceViews('http://www.example.org/accelerateMLC', 'http://www.example.org/accelerateMLI', 'http://www.example.org/accelerateMLS')]

[template public generateResourceViews(resource: RESTResource, namespace: Namespace, microservice: BackendMicroservice, environment: Provider)]

[comment Se genera el controlador en la ruta "./ambiente1/Microservices/microservicio1/src/controllers/ejemploController.js"/]
[file ((environment.oclAsType(Environment).name + '/Microservices/'+microservice.oclAsType(Microservice).name+'/src/views/'+namespace.name+'Views/'+resource.name+'View.py'), false, 'UTF-8'), false, 'UTF-8')]
[comment Se proveen los metodos de acceso getAll, getOneById, saveOne, updateOneById, deleteOneById
	     pero su unica funcionalidad es indicar que aun no han sido implementados. /]
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action

class [resource.name/](viewsets.ViewSet):

[if (resource.contained_routes -> size() = 0 )]
	# GET path /api/[namespace.name/]/[resource.name/]/
    def list(self, request, format=None):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
[/if]

[for (route : RESTRoute | self.contained_routes -> selectByType(RESTRoute))]
	[if (route.pathExtension.toString() = '/')]
		[if (route.httpMethod.toString() = 'GET')]
			[if (route.parameters.size() = 0)]
	# GET path /api/[namespace.name/]/[resource.name/]/
    def list(self, request, format=None):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)	
			[else]
	# GET path /api/[namespace.name/]/[resource.name/]/{[route.parameters.toString()/]}/
    def retrieve(self, request, pk=[route.parameters.toString()/]):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
			[/if]
		[elseif (route.httpMethod.toString() = 'POST')]
    # POST path /api/[namespace.name/]/[resource.name/]/
    def create(self, request):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
		[elseif (route.httpMethod.toString() = 'PUT')]
    # PUT path /api/[namespace.name/]/[resource.name/]/{[route.parameters.toString()/]}/
    def update(self, request, pk=[route.parameters.toString()/]):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
		[elseif (route.httpMethod.toString() = 'DELETE')]
    # DELETE path /api/[namespace.name/]/[resource.name/]/{[route.parameters.toString()/]}/
    def destroy(self, request, pk=[route.parameters.toString()/]):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
		[/if]
	[elseif (route.parameters.size() = 0)]
	# [route.httpMethod.toString()/] /api/[namespace.name/]/[resource.name/]/[route.pathExtension.replace('/', '')/]/
    @action(methods=['["'/][route.httpMethod.toString().toLower()/]['"]'/], detail=False, url_path="[route.pathExtension.replace('/', '')/]")
    def route(self, request):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
	[else]
	# [route.httpMethod.toString()/] /api/[namespace.name/]/[resource.name/]/[route.pathExtension.replace('/', '')/]/{[route.parameters.toString()/]}/
    @action(methods=['["'/][route.httpMethod.toString().toLower()/]['"]'/], detail=True, url_path="[route.pathExtension.replace('/', '')/]")
    def route[resource.contained_routes->selectByType(RESTRoute)->indexOf(route)/](self, request, pk=[route.parameters.toString()/]):
        return Response('NOT IMPLEMENTED',status=status.HTTP_200_OK)
	[/if]

[/for]





[/file]
[/template]
